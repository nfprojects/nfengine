{
  "comments": [
    {
      "key": {
        "uuid": "9ad9bd40_1dafc22c",
        "filename": "nfEngine/nfCommon/DirectoryWatch.hpp",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "tooing manying ings and ses. :)\n\n\"Class which allows user to watch directories for changes\"\n\n@brief at the beginning could be helpful as well.",
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_3d21e6b4",
        "filename": "nfEngine/nfCommon/DirectoryWatch.hpp",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "Why not unsigned?",
      "range": {
        "startLine": 36,
        "startChar": 23,
        "endLine": 36,
        "endChar": 26
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_7d544e21",
        "filename": "nfEngine/nfCommon/DirectoryWatch.hpp",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "Use underlying_type, it is more generic. Type change of stronlgy typed enum Event will be then only a one-place change, operators will follow them (if possible).\n\nConsole.cpp (or hpp, I don\u0027t remember) uses underlying_type for \u0026 and | operators.",
      "range": {
        "startLine": 96,
        "startChar": 58,
        "endLine": 96,
        "endChar": 61
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_dd11da5e",
        "filename": "nfEngine/nfCommon/Linux/DirectoryWatch.cpp",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "No need for this part, it should improve visibility of the code a little bit. Correct below as well.",
      "range": {
        "startLine": 61,
        "startChar": 37,
        "endLine": 61,
        "endChar": 54
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_58915851",
        "filename": "nfEngine/nfCommonTest/DirectoryWatchTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "consts should be written IN_ALL_CAPITALS :)",
      "range": {
        "startLine": 10,
        "startChar": 19,
        "endLine": 10,
        "endChar": 27
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_1887d010",
        "filename": "nfEngine/nfCommonTest/DirectoryWatchTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "Not needed. Almost all test suites avoid the word.\n\nBTW we must finally unify these names and remove useless \"Test\" word where applicable...",
      "range": {
        "startLine": 17,
        "startChar": 20,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_78761c08",
        "filename": "nfEngine/nfCommonTest/DirectoryWatchTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "Duplicated line. Shouldn\u0027t gTestDir be gTestDir2?",
      "range": {
        "startLine": 45,
        "startChar": 4,
        "endLine": 45,
        "endChar": 74
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_f8430c6a",
        "filename": "nfEngine/nfCommonTest/DirectoryWatchTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 138,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "I know this is easier to name, however I would prefer to see that \"MoveWithinSingleWatched\" failed, instead of \"Move_6123\". At least I know what is happening. :)\n\nCorrect others as well.",
      "range": {
        "startLine": 138,
        "startChar": 31,
        "endLine": 138,
        "endChar": 33
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_1849908b",
        "filename": "nfEngine/nfCommonTest/DirectoryWatchTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "Since only two events above are interesting in this test case, why Event::Delete is here?",
      "range": {
        "startLine": 167,
        "startChar": 36,
        "endLine": 167,
        "endChar": 65
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_385d7449",
        "filename": "nfEngine/nfCommonTest/DirectoryWatchTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 211,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "As above, for other places below as well.",
      "range": {
        "startLine": 211,
        "startChar": 36,
        "endLine": 211,
        "endChar": 65
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_1840b055",
        "filename": "nfEngine/nfCommonTest/DirectoryWatchTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 388,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "Add a \"DestructorRemoveWatch\" test. Theoretically, destroying a DirectoryWatch object should cause no assertions as well.",
      "range": {
        "startLine": 388,
        "startChar": 26,
        "endLine": 388,
        "endChar": 38
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_9347434b",
        "filename": "nfEngine/nfCommonTest/DirectoryWatchTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 394,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-27T11:10:19Z",
      "side": 1,
      "message": "This is not a good idea on Windows, as discussed.",
      "range": {
        "startLine": 394,
        "startChar": 7,
        "endLine": 394,
        "endChar": 26
      },
      "revId": "96e0079d5c3cfc79f8a86d4943b49518e0ee0431",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}