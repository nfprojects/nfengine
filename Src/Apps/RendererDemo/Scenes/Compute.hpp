/**
 * @file
 * @author  Witek902 (witek902@gmail.com)
 * @brief   Declarations of Compute scene
 */

#pragma once

#include "Scene.hpp"

class ComputeScene: public Scene
{
    // Renderer interfaces generated by BasicScene
    NFE::Renderer::ComputePipelineStatePtr mPipelineState_PrepareArg;
    NFE::Renderer::ComputePipelineStatePtr mPipelineState_Main;
    NFE::Renderer::ShaderPtr mShader_PrepareArg;
    NFE::Renderer::ShaderPtr mShader_Main;
    NFE::Renderer::BufferPtr mConstantBuffer;
    NFE::Renderer::TexturePtr mTexture; // compute shader target

    NFE::Renderer::ResourceBindingSetPtr mBindingSet;
    NFE::Renderer::ResourceBindingLayoutPtr mResBindingLayout;
    NFE::Renderer::ResourceBindingInstancePtr mBindingInstance;

    NFE::Renderer::BufferPtr mIndirectArgBuffer;

    // Releases only subscene-related resources. Backbuffer, RT and BlendState stay intact.
    void ReleaseSubsceneResources() override;

    // Subscenes
    bool CreateSubSceneSimple();
    bool CreateSubSceneIndirect();

    bool mUseIndirectDispatch;
    NFE::uint32 mDispatchX;
    NFE::uint32 mDispatchY;

public:
    ComputeScene();
    ~ComputeScene();

    bool OnInit(void* winHandle) override;
    void Draw(float dt) override;
    void Release() override;
};
