{
  "comments": [
    {
      "key": {
        "uuid": "9ad9bd40_2c481eb2",
        "filename": "nfEngine/Renderers/nfRendererOGL4/CommandBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1002654
      },
      "writtenOn": "2015-08-10T09:17:06Z",
      "side": 1,
      "message": "What about this function? I thought that SSO will be used to bind separate shaders with SetShader and traditional shader objects will be used for SetShaderProgram",
      "revId": "4f689f0bda46ca8126c15250ab8e59f5cce1ac77",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_ccb25293",
        "filename": "nfEngine/Renderers/nfRendererOGL4/CommandBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-10T09:27:26Z",
      "side": 1,
      "message": "This is for the next commit, as stated in the Commit Message.",
      "parentUuid": "9ad9bd40_2c481eb2",
      "revId": "4f689f0bda46ca8126c15250ab8e59f5cce1ac77",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_ec3c7631",
        "filename": "nfEngine/Renderers/nfRendererOGL4/Shader.cpp",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1002654
      },
      "writtenOn": "2015-08-10T09:17:06Z",
      "side": 1,
      "message": "Commas, not, needed :)",
      "range": {
        "startLine": 45,
        "startChar": 34,
        "endLine": 45,
        "endChar": 44
      },
      "revId": "4f689f0bda46ca8126c15250ab8e59f5cce1ac77",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_a460ba01",
        "filename": "nfEngine/Renderers/nfRendererOGL4/Shader.cpp",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-12T19:30:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ad9bd40_ec3c7631",
      "range": {
        "startLine": 45,
        "startChar": 34,
        "endLine": 45,
        "endChar": 44
      },
      "revId": "4f689f0bda46ca8126c15250ab8e59f5cce1ac77",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_6c9b0618",
        "filename": "nfEngine/Renderers/nfRendererOGL4/Shader.cpp",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1002654
      },
      "writtenOn": "2015-08-10T09:17:06Z",
      "side": 1,
      "message": "This function may fail",
      "range": {
        "startLine": 144,
        "startChar": 8,
        "endLine": 144,
        "endChar": 26
      },
      "revId": "4f689f0bda46ca8126c15250ab8e59f5cce1ac77",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_0429669a",
        "filename": "nfEngine/Renderers/nfRendererOGL4/Shader.cpp",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-12T19:30:26Z",
      "side": 1,
      "message": "Indeed.\n\nThe traditional way of handling errors is by glGetError. Sad thing is, this might terribly clutter the code by having regular code blocks in the lights of:\n\nGLenum err \u003d glGetError()\nif (err !\u003d GL_NO_ERROR)\n{\n    LOG_ERROR(\"Call to ... failed: %d\", err);\n    // further error handling\n}\n\nI suggest to leave this for another commit. OGL4.3 introduced some neat functions like glDebugMessageCallback, glDebugMessageControl and glDebugMessageInsert. This would be the best way for us to handle errors, however it would require some code to properly add it to nfRendererOGL4.",
      "parentUuid": "9ad9bd40_6c9b0618",
      "range": {
        "startLine": 144,
        "startChar": 8,
        "endLine": 144,
        "endChar": 26
      },
      "revId": "4f689f0bda46ca8126c15250ab8e59f5cce1ac77",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_ecd8f6f0",
        "filename": "nfEngine/Renderers/nfRendererOGL4/Shader.hpp",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1002654
      },
      "writtenOn": "2015-08-10T09:17:06Z",
      "side": 1,
      "message": "There is no \"shader program\" concept in D3D prior to version 12 (but there it\u0027s named \"pipeline state object\").",
      "range": {
        "startLine": 36,
        "startChar": 72,
        "endLine": 36,
        "endChar": 91
      },
      "revId": "4f689f0bda46ca8126c15250ab8e59f5cce1ac77",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_ecad5632",
        "filename": "nfEngine/Renderers/nfRendererOGL4/Shader.hpp",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1002655
      },
      "writtenOn": "2015-08-10T09:27:26Z",
      "side": 1,
      "message": "But in version 11 there is, I based on that and on Interfaces we have in nfRenderer.",
      "parentUuid": "9ad9bd40_ecd8f6f0",
      "range": {
        "startLine": 36,
        "startChar": 72,
        "endLine": 36,
        "endChar": 91
      },
      "revId": "4f689f0bda46ca8126c15250ab8e59f5cce1ac77",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}