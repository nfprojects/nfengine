/**
 * @file
 * @author Witek902 (witek902@gmail.com)
 * @brief  Declarations of VertexBuffersScene functions
 *
 * This test checks following functionalities:
 * * binding multiple vertex buffers (one containing positions and second containing color)
 * * instancing - binding third buffer containing per-instance data
 * * dynamic vertex buffers
 */

#pragma once

#include "Scene.hpp"

using namespace NFE::Renderer;

class VertexBuffersScene : public Scene
{
    // Renderer interfaces generated by VertexBuffersScene
    std::unique_ptr<IBackbuffer> mWindowBackbuffer;
    std::unique_ptr<IRenderTarget> mWindowRenderTarget;

    std::unique_ptr<IShader> mVertexShader;
    std::unique_ptr<IShader> mPixelShader;
    std::unique_ptr<IShaderProgram> mShaderProgram;

    std::unique_ptr<IBuffer> mPositionsVertexBuffer;
    std::unique_ptr<IBuffer> mColorVertexBuffer;
    std::unique_ptr<IBuffer> mInstanceBuffer;
    std::unique_ptr<IBuffer> mIndexBuffer;
    std::unique_ptr<IVertexLayout> mVertexLayout;

    std::unique_ptr<IRasterizerState> mRasterizerState;

    // ShaderProgramDesc must be a member, VertexLayout requires vertex shader access
    ShaderProgramDesc mShaderProgramDesc;

    // Shader creator
    IShader* CompileShader(const char* path, ShaderType type, ShaderMacro* macros, size_t macrosNum);

    // Releases only subscene-related resources. Backbuffer, RT and BlendState stay intact.
    void ReleaseSubsceneResources();

    // Resource creators for subscenes
    bool CreateShaderProgram(bool useInstancing);
    bool CreateBuffers(bool withInstanceBuffer);

    // Subscenes
    bool CreateSubSceneSimple();
    bool CreateSubSceneInstancing();

public:
    VertexBuffersScene();
    ~VertexBuffersScene();

    bool OnInit(void* winHandle);
    bool OnSwitchSubscene();
    void Draw(float dt);
    void Release();
};
