/**
 * @file
 * @author  Witek902 (witek902@gmail.com)
 * @brief   Declarations of Compute scene
 */

#pragma once

#include "Scene.hpp"

class ComputeScene: public Scene
{
    // Renderer interfaces generated by BasicScene
    std::unique_ptr<NFE::Renderer::IBackbuffer> mWindowBackbuffer;
    std::unique_ptr<NFE::Renderer::IComputePipelineState> mPipelineState;
    std::unique_ptr<NFE::Renderer::IShader> mShader;
    std::unique_ptr<NFE::Renderer::IBuffer> mConstantBuffer;
    std::unique_ptr<NFE::Renderer::ITexture> mTexture; // compute shader target

    std::unique_ptr<NFE::Renderer::IResourceBindingSet> mBindingSet;
    std::unique_ptr<NFE::Renderer::IResourceBindingLayout> mResBindingLayout;
    std::unique_ptr<NFE::Renderer::IResourceBindingInstance> mBindingInstance;

    // Releases only subscene-related resources. Backbuffer, RT and BlendState stay intact.
    void ReleaseSubsceneResources();

    // Subscenes
    bool CreateSubSceneSimple();

    NFE::uint32 mDispatchX;
    NFE::uint32 mDispatchY;

public:
    ComputeScene();
    ~ComputeScene();

    bool OnInit(void* winHandle) override;
    void Draw(float dt) override;
    void Release() override;
};
