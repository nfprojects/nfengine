/**
 * @file
 * @author Witek902 (witek902@gmail.com)
 * @brief  Declarations of RenderTargetsScene functions
 */

#pragma once

#include "Scene.hpp"

class RenderTargetsScene : public Scene
{
    /// Renderer interfaces generated by the scene

    std::unique_ptr<NFE::Renderer::IBackbuffer> mWindowBackbuffer;
    std::unique_ptr<NFE::Renderer::IRenderTarget> mWindowRenderTarget;

    std::unique_ptr<NFE::Renderer::ITexture> mRenderTargetTextures[2];
    std::unique_ptr<NFE::Renderer::ITexture> mDepthBuffer;
    std::unique_ptr<NFE::Renderer::IRenderTarget> mRenderTarget;

    std::unique_ptr<NFE::Renderer::IShader> mVertexShader;
    std::unique_ptr<NFE::Renderer::IShader> mRTPixelShader;
    std::unique_ptr<NFE::Renderer::IShader> mPrimaryTargetPixelShader;
    std::unique_ptr<NFE::Renderer::IShader> mDepthPixelShader;
    std::unique_ptr<NFE::Renderer::IShader> mSecondTargetPixelShader;

    std::unique_ptr<NFE::Renderer::IShaderProgram> mRTShaderProgram;
    std::unique_ptr<NFE::Renderer::IShaderProgram> mPrimaryTargetShaderProgram;
    std::unique_ptr<NFE::Renderer::IShaderProgram> mDepthShaderProgram;
    std::unique_ptr<NFE::Renderer::IShaderProgram> mSecondTargetShaderProgram;

    std::unique_ptr<NFE::Renderer::IBuffer> mConstantBuffer;
    std::unique_ptr<NFE::Renderer::IBuffer> mVertexBuffer;
    std::unique_ptr<NFE::Renderer::IBuffer> mIndexBuffer;
    std::unique_ptr<NFE::Renderer::IVertexLayout> mVertexLayout;

    std::unique_ptr<NFE::Renderer::ISampler> mSampler;
    std::unique_ptr<NFE::Renderer::IPipelineState> mPipelineState;

    float mAngle;

    void ReleaseSubsceneResources();

    bool CreateBasicResources();
    bool CreateRenderTarget(bool withDepthBuffer = false,
                            bool multipleRT = false,
                            bool withMSAA = false);
    bool CreateShaders(bool multipleRT = false,
                       bool withMSAA = false);

    /// Subscenes
    bool CreateSubSceneNoDepthBuffer();
    bool CreateSubSceneDepthBuffer();
    bool CreateSubSceneMRT();
    bool CreateSubSceneMRTandMSAA();

public:
    RenderTargetsScene();
    ~RenderTargetsScene();

    bool OnInit(void* winHandle);
    bool OnSwitchSubscene();
    void Draw(float dt);
    void Release();
};
