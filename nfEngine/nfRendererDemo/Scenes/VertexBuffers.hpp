/**
 * @file
 * @author Witek902 (witek902@gmail.com)
 * @brief  Declarations of VertexBuffersScene functions
 *
 * This test checks following functionalities:
 * * binding multiple vertex buffers (one containing positions and second containing color)
 * * instancing - binding third buffer containing per-instance data
 * * dynamic vertex buffers
 */

#pragma once

#include "Scene.hpp"

#include "nfCommon/Math/Vector.hpp"


class VertexBuffersScene : public Scene
{
    struct InstanceData
    {
        NFE::Math::Float3 pos;
        NFE::Math::Float4 color;
    };

    // Renderer interfaces generated by VertexBuffersScene
    std::unique_ptr<NFE::Renderer::IBackbuffer> mWindowBackbuffer;
    std::unique_ptr<NFE::Renderer::IRenderTarget> mWindowRenderTarget;

    std::unique_ptr<NFE::Renderer::IShader> mVertexShader;
    std::unique_ptr<NFE::Renderer::IShader> mPixelShader;

    std::unique_ptr<NFE::Renderer::IBuffer> mPositionsVertexBuffer;
    std::unique_ptr<NFE::Renderer::IBuffer> mColorVertexBuffer;
    std::unique_ptr<NFE::Renderer::IBuffer> mInstanceBuffer;
    std::unique_ptr<NFE::Renderer::IBuffer> mIndexBuffer;
    std::unique_ptr<NFE::Renderer::IVertexLayout> mVertexLayout;

    std::unique_ptr<NFE::Renderer::IPipelineState> mPipelineState;
    std::unique_ptr<NFE::Renderer::IResourceBindingLayout> mResBindingLayout;


    // for dynamic vertex buffers
    std::vector<InstanceData> mInstancesData;
    std::vector<NFE::Math::Float2> mVelocities;
    NFE::Renderer::BufferMode mVertexBufferMode;

    // Releases only subscene-related resources. Backbuffer, RT and BlendState stay intact.
    void ReleaseSubsceneResources();

    // Resource creators for subscenes
    bool LoadShaders(bool useInstancing);
    bool CreateBuffers(bool withInstanceBuffer, NFE::Renderer::BufferMode vertexBufferMode);

    // Subscenes
    bool CreateSubSceneSimple();
    bool CreateSubSceneInstancing(NFE::Renderer::BufferMode vertexBufferMode);

public:
    VertexBuffersScene();
    ~VertexBuffersScene();

    bool OnInit(void* winHandle) override;
    void Draw(float dt) override;
    void Release() override;
};
