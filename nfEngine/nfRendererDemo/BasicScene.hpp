/**
 * @file
 * @author LKostyra (costyrra.xl@gmail.com)
 * @brief  Declarations of Scene functions
 *
 * The subscenes described in this file are meant to help in new Renderer backend creation process.
 * In theory, each subscene should add a small amount of Renderers Interfaces (ideally, only one),
 * which will represent specific Renderers features. The subscenes should rely on each other - more
 * complex subscene will add new Interface initialization to simplier scenes. This way it can be
 * easily tracked which features are yet to be implemented in a newly developed Renderer backend.
 */

#pragma once

#include "Scene.hpp"

using namespace NFE::Renderer;

class BasicScene: public Scene
{
    // Renderer interfaces generated by BasicScene
    std::unique_ptr<IBackbuffer> mWindowBackbuffer;
    std::unique_ptr<IRenderTarget> mWindowRenderTarget;
    std::unique_ptr<IBlendState> mBlendState;
    std::unique_ptr<IShader> mVertexShader;
    std::unique_ptr<IShader> mPixelShader;
    std::unique_ptr<IShaderProgram> mShaderProgram;
    std::unique_ptr<IBuffer> mVertexBuffer;
    std::unique_ptr<IVertexLayout> mVertexLayout;
    std::unique_ptr<IBuffer> mIndexBuffer;
    std::unique_ptr<IBuffer> mConstantBuffer;
    std::unique_ptr<ISampler> mSampler;
    std::unique_ptr<ITexture> mTexture;

    // ShaderProgramDesc must be a member, VertexLayout requires vertex shader access
    ShaderProgramDesc mShaderProgramDesc;

    // Used for objects rotation in Constant Buffer scenes and onward
    float mAngle;

    // Shader creator
    IShader* CompileShader(const char* path, ShaderType type, ShaderMacro* macros, size_t macrosNum);

    // Releases only subscene-related resources. Backbuffer, RT and BlendState stay intact.
    void ReleaseSubsceneResources();

    // Resource creators for subscenes
    bool CreateShaderProgram(bool useCBuffer, bool useTexture);
    bool CreateVertexBuffer(bool withExtraVert);
    bool CreateIndexBuffer();
    bool CreateConstantBuffer();
    bool CreateTexture();

    // Subscenes
    bool CreateSubSceneEmpty();
    bool CreateSubSceneVertexBuffer();
    bool CreateSubSceneIndexBuffer();
    bool CreateSubSceneConstantBuffer();
    bool CreateSubSceneTexture();

public:
    BasicScene();
    ~BasicScene();

    bool OnInit(void* winHandle);
    bool OnSwitchSubscene();
    void Draw(float dt);
    void Release();
};
