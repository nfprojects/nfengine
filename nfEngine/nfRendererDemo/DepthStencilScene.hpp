/**
 * @file
 * @author Witek902 (witek902@gmail.com)
 * @brief  Declarations of DepthStencilScene functions
 */

#pragma once

#include "Scene.hpp"

using namespace NFE::Renderer;

class DepthStencilScene: public Scene
{
    /// Renderer interfaces, acquired outside of the scene
    IDevice* mRendererDevice;
    ICommandBuffer* mCommandBuffer;

    /// Renderer interfaces generated by the scene
    std::unique_ptr<IBackbuffer> mWindowBackbuffer;
    std::unique_ptr<IRenderTarget> mWindowRenderTarget;
    std::unique_ptr<ITexture> mDepthBuffer;

    std::unique_ptr<IShader> mVertexShader;
    std::unique_ptr<IShader> mPixelShader;
    std::unique_ptr<IBuffer> mConstantBuffer;
    std::unique_ptr<IBuffer> mVertexBuffer;
    std::unique_ptr<IBuffer> mIndexBuffer;
    std::unique_ptr<IVertexLayout> mVertexLayout;
    std::unique_ptr<IShaderProgram> mShaderProgram;

    std::unique_ptr<IBlendState> mFloorBlendState;
    std::unique_ptr<IDepthState> mMaskDepthState;
    std::unique_ptr<IDepthState> mReflectionDepthState;
    std::unique_ptr<IDepthState> mDepthState;
    std::unique_ptr<IRasterizerState> mRasterizerState;

    // ShaderProgramDesc must be a member, VertexLayout requires vertex shader access
    ShaderProgramDesc mShaderProgramDesc;

    float mAngle;

    // Shaders path prefix and extension, used in CreateShader to read Shader code
    const std::string mShaderPathPrefix;
    const std::string mShaderPathExt;

    IShader* CompileShader(const char* path, ShaderType type, ShaderMacro* macros,
                           size_t macrosNum);

public:
    DepthStencilScene(const std::string& shaderPathPrefix, const std::string& shaderPathExt);
    ~DepthStencilScene();

    bool Init(NFE::Renderer::IDevice* rendererDevice, void* winHandle);
    bool SwitchSubscene(size_t subScene);
    size_t GetAvailableSubSceneCount();
    void Draw();
    void Release();
};
