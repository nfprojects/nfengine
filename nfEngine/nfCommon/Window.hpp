/**
 * @file
 * @author Witek902 (witek902@gmail.com)
 * @brief  Window class declaration.
 */

#pragma once

#include "nfCommon.hpp"

#if defined(__LINUX__) | defined(__linux__)
#include <X11/Xlib.h>
#endif // defined(__LINUX__) | defined(__linux__)

#define NFE_WINDOW_KEYS_NUM 256

namespace NFE {
namespace Common {

typedef void (*WindowResizeCallback)(void*);

// Virtual-Key Codes taken from MSDN.
// These are based on codes generated by a Keyboard, so Linux version is identical.
// enum is not strongly typed due to implicit conversion from KeyCode to int.
enum KeyCode
{
    Backspace = 0x08,
    Tab,
    // here 0x0A-0x0B are reserved, 0x0C is unused CLEAR
    Enter = 0x0D,
    // 0x0E - 0x0F reserved
    Shift = 0x10,
    Control,
    Alt,
    Pause,
    CapsLock,
    // 0x15 - 0x1A are IME-related keys, not needed by us
    Escape = 0x1B,
    // 0x1C - 0x1F are IME-related keys
    Space = 0x20,
    PageUp,
    PageDown,
    End,
    Home,
    Left,
    Up,
    Right,
    Down,
    Select,
    Print,
    Execute,
    PrintScreen,
    Insert,
    Delete,
    // regular chars does not require key codes - use apostrophes to catch them
    WinLeft = 0x5B,
    WinRight,
    // 0x5D - Apps Key (unused), 0x5E - Reserved, 0x5F - PC Sleep key
    Numpad0 = 0x60,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadMulitply,
    NumpadAdd,
    NumpadSeparator,
    NumpadSubtract,
    NumpadDecimal,
    NumpadDivide,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    // 0x88-0x8F - unassigned keys
    NumLock = 0x90,
    ScrollLock,
    // 0x92-0x96 - OEM-specific, 0x97-0x9F - unassigned
    ShiftLeft= 0xA0,
    ShiftRight,
    ControlLeft,
    ControlRight,
    MenuLeft,
    MenuRight,
    // rest of the keys are media controllers and OEM/IME special
};

/**
 * Simple UI windows class.
 */
class NFCOMMON_API Window
{
private:
#if defined(WIN32)
    static LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
    HWND mHandle;
    HINSTANCE mInstance;
    int mLeft;
    int mTop;
    wchar_t mWndClass[48];
#elif defined(__LINUX__) | defined(__linux__)
    static ::Display* mDisplay;
    ::Window mWindow;
    ::Window mRoot;
    static bool mWindowError;
    static int ErrorHandler(::Display* dpy, XErrorEvent *error);
#else //...
#error "Target not supported!" // TODO Consider supporting Wayland as well
#endif // defined(WIN32)

    bool mClosed;
    bool mFullscreen;
    uint32 mWidth;
    uint32 mHeight;
    std::string mTitle;

    /// input recorded since last @p ProcessMessages() method call
    bool mMouseButtons[3];
    int mMousePos[2];
    int mMouseWheelDelta;
    std::string mCharacters;
    bool mKeys[NFE_WINDOW_KEYS_NUM];

    // used by renderer
    WindowResizeCallback mResizeCallback;
    void* mResizeCallbackUserData;

    void LostFocus();
    void MouseDown(uint32 button, int x, int y);
    void MouseUp(uint32 button);
    void MouseMove(int x, int y);

    Window(const Window&);
    Window& operator= (const Window&);

public:
    Window();
    ~Window();

    bool Open();
    bool Close();

    void* GetHandle() const;
    void GetSize(uint32& width, uint32& height) const;
    float GetAspectRatio() const;
    bool GetFullscreenMode() const;


    NFE_INLINE int GetMouseWheelDelta() const
    {
        return mMouseWheelDelta;
    }

    NFE_INLINE void GetMousePosition(int& x, int& y) const
    {
        x = mMousePos[0];
        y = mMousePos[1];
    }

    NFE_INLINE bool IsMouseButtonDown(uint32 button) const
    {
        return mMouseButtons[button];
    }

    /**
     * Check if a key is pressed.
     */
    NFE_INLINE bool IsKeyPressed(int key) const
    {
        if (key >= 0 && key <= NFE_WINDOW_KEYS_NUM)
            return mKeys[key];
        return false;
    }

    /**
     * Get typed UTF-8 characters typed since last @p ProcessMessages() method call.
     */
    NFE_INLINE const char* GetInputCharacters() const
    {
        return mCharacters.c_str();
    }

    void SetSize(uint32 width, uint32 height);
    void SetFullscreenMode(bool enabled);
    void SetTitle(const char* title);

    // WARINING: only engine should call this function
    void SetResizeCallback(WindowResizeCallback func, void* userData);

    void ProcessMessages();
    bool IsClosed() const;
    bool HasFocus() const;

    // callbacks
    virtual void OnClose();
    virtual void OnResize(uint32 width, uint32 height);
    virtual void OnKeyPress(int key);
    virtual void OnScroll(int delta);
    virtual void OnMouseDown(uint32 button, int x, int y);
    virtual void OnMouseMove(int x, int y, int deltaX, int deltaY);
    virtual void OnMouseUp(uint32 button);
};

} // namespace Common
} // namespace NFE
